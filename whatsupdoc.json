{
    "name": ".",
    "lineNo": 3,
    "params": [],
    "errors": [
        "Did not recognize \"license\" tag."
    ],
    "throws": [],
    "see": [],
    "author": {
        "name": "Kris Kowal",
        "url": "http://askawizard.blogspot.com",
        "email": "kris@cixar.com"
    },
    "module": true,
    "doc": "An API for parsing inline JavaScript documentation.",
    "type": "module",
    "id": ".",
    "children": [
        {
            "name": "parseModule",
            "lineNo": 17,
            "params": [
                {
                    "name": "text",
                    "type": "String",
                    "doc": "the text of a JavaScript program"
                },
                {
                    "name": "id",
                    "type": "String",
                    "doc": "optional module identifier"
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "returns": {
                "type": "{name, doc, children}",
                "doc": "a tree of code point documentation descriptors of the form `{name, type, params, returns, throws, doc, errors, children, fileName, lineNo}`"
            },
            "doc": "Creates a documentation tree for a module."
        },
        {
            "name": "comments",
            "lineNo": 37,
            "params": [
                {
                    "name": "text",
                    "type": "String",
                    "doc": "the text of a JavaScript program."
                },
                {
                    "name": "fileName",
                    "type": "String",
                    "doc": "optional"
                },
                {
                    "name": "lineNo",
                    "type": "Number",
                    "doc": "line number starting with 1, optional"
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "returns": {
                "type": "Array * {comment, code, prefix, fileName, lineNo}",
                "doc": ""
            },
            "doc": "takes the text of a JavaScript file and returns an array\nof each of the block comments, the prefix on the initial\nline (for measuring indentation), and the subsequent code\nup to the next comment.\n\nIt's a good idea to expand the tabs in the program text\nbefore running them through this function.  The `util`\nmodule in the `narwhal-lib` package provides an `expand`\nfunction that serves this purpose."
        },
        {
            "name": "docs",
            "lineNo": 127,
            "params": [
                {
                    "name": "nodes",
                    "type": "Array * {comment, prefix, code, fileName, lineNo}",
                    "doc": "nodes in the format produced by `comments`"
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "returns": {
                "type": "Array * {doc, code, name, level, fileName, lineNo}",
                "doc": "nodes"
            },
            "doc": "Extracts documentation nodes from comment nodes.\n\nTakes the output of the `comments` method and returns an\narray of objects with `doc`, `code`, and `level`\nproperties, consumable by `parseDocs`.\n\n* `doc` is a string containing each line of\n   the original `comment` with the leading cruft on each\n   line trimmed off.\n* `code` is the subsequent code up\n   to the next comment.\n* `level` is the number of extra stars on the beginning\n  of the comment.  These can be used to provide an\n  indication of hierarchical depth."
        },
        {
            "name": "guessMarkup",
            "lineNo": 191,
            "params": [],
            "errors": [],
            "throws": [],
            "see": [],
            "doc": "Scans an array of comment descriptors as provided by the\n`comments` method and returns a markup language module\nname.  The default is `undefined`."
        },
        {
            "name": "parseDocs",
            "lineNo": 206,
            "params": [
                {
                    "name": "nodes",
                    "type": "Array * {level, doc, code, fileName, lineNo}"
                },
                {
                    "name": "markup",
                    "type": "String",
                    "doc": "the name of a markup module, a module that exports a `to` method for whatever format the documentation must be rendered in, for example `toHtml`. The `to` method may accept a second argument, a function for resolving custom references if they are supported by the language."
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "returns": {
                "type": "Array",
                "doc": "with `name`, `level`, `markup`, and the properties added by {@link parseDoc}."
            },
            "doc": "Takes an array of nodes produced by `docs` and returns an\narray of nodes consumable by `tree`.  Uses `parseDoc` to\nextract `@` meta-data like `param` and `returns`.  Uses\n`guessName` to guess the name of the object.  `@name`\noverrides the guess."
        },
        {
            "name": "tree",
            "lineNo": 243,
            "params": [
                {
                    "name": "nodes",
                    "type": "Array * {level, ...}"
                },
                {
                    "name": "id",
                    "type": "String",
                    "doc": "optional module identifier"
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "returns": {
                "type": "{\"type\": \"module\", \"id\": id, \"children\": Array * ...}",
                "doc": ""
            },
            "doc": "takes a linear list of documentation nodes from a single\nmodule, such as those returned by `parseDocs`, and\nreturns the root of a tree of nodes, where the `level`\nnumbers are translated into `children` arrays."
        },
        {
            "name": "guessName",
            "lineNo": 288,
            "params": [
                {
                    "name": "code",
                    "type": "String",
                    "doc": "a block of code to search for an applicable name."
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "returns": {
                "type": "String | Undefined",
                "doc": "a name or undefined if no name can be found."
            },
            "doc": ""
        },
        {
            "name": "parseDoc",
            "lineNo": 301,
            "params": [
                {
                    "name": "text",
                    "type": "String",
                    "doc": "a documentation string"
                },
                {
                    "name": "node",
                    "type": "Object",
                    "doc": "a documentation node, as provided by `parseDocs`"
                },
                {
                    "name": "tagParsers",
                    "type": "Object * [name String, handler Function(text, node)]",
                    "doc": "an optional mapping of `@` tag names to corresponding handlers.  Defaults to `tagParsers` as exported by the same module."
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "returns": {
                "doc": "node"
            },
            "doc": "Accepts a documentation string and a documentation node,\nstrips out and applies the `@` metadata blocks to the\ndocumentation node."
        },
        {
            "name": "tagParsers",
            "lineNo": 352,
            "params": [],
            "errors": [],
            "throws": [],
            "see": [],
            "doc": "an `Object` mapping tag names to parser functions, in the\nform accepted by the `tagParsers` argument of `parseDoc`.\nThe parser functions accept the tag text and the node\nthey are augmenting, in the form of one of the objects\nreturned by `parseDoc`.",
            "children": [
                {
                    "name": "param",
                    "lineNo": 361,
                    "params": [
                        {
                            "name": "text",
                            "type": "String"
                        },
                        {
                            "name": "node",
                            "type": "{errors Array}"
                        }
                    ],
                    "errors": [],
                    "throws": [],
                    "see": [],
                    "doc": "parses an `@param` tag, pushing an `Object` of the\nform `{name, type, description}` onto the `params`\n`Array` of the given `node`."
                },
                {
                    "name": "params",
                    "lineNo": 389,
                    "params": [
                        {
                            "name": "text",
                            "type": "String"
                        },
                        {
                            "name": "node",
                            "type": "{errors Array}"
                        }
                    ],
                    "errors": [],
                    "throws": [],
                    "see": [],
                    "doc": "parses an `@params` tag for variadic parameters, pushing an\n`Object` of the form `{name, type, description, variadic: true}`\nonto the `params` `Array` of the given `node`."
                },
                {
                    "name": "returns",
                    "lineNo": 417,
                    "params": [
                        {
                            "name": "text",
                            "type": "String"
                        },
                        {
                            "name": "node",
                            "type": "{errors Array}"
                        }
                    ],
                    "errors": [],
                    "throws": [],
                    "see": [],
                    "doc": "parses an `@returns` tag, setting the `returns`\nproperty of the given `node` to an `Object` of the form,\n`{name, type, description}`."
                },
                {
                    "name": "return",
                    "lineNo": 438,
                    "params": [
                        {
                            "name": "text",
                            "type": "String"
                        },
                        {
                            "name": "node",
                            "type": "{errors Array}"
                        }
                    ],
                    "errors": [
                        "Did not recognize \"see\" tag."
                    ],
                    "throws": [],
                    "see": [],
                    "doc": ""
                },
                {
                    "name": "name",
                    "lineNo": 446,
                    "params": [
                        {
                            "name": "text",
                            "type": "String"
                        },
                        {
                            "name": "node",
                            "type": "{errors Array}"
                        }
                    ],
                    "errors": [],
                    "throws": [],
                    "see": [],
                    "doc": "Specifies or overrides the documentation parser's guess\nfor the name of the object being documented."
                },
                {
                    "name": "author",
                    "lineNo": 457,
                    "params": [
                        {
                            "name": "text",
                            "type": "String"
                        },
                        {
                            "name": "node",
                            "type": "{errors Array}"
                        }
                    ],
                    "errors": [],
                    "throws": [],
                    "see": [],
                    "doc": "Notes the author.  Uses the `Author` type from the\n`packages` module of the `narwhal-lib` package to\nnormalize a string representation of an author of the\nform:\n\n    Author Name (http://example.com) <author@example.com>\n\nWhere each component is optional and gets composed into\nan `Object` with `name`, `url` and `email` properties."
                },
                {
                    "name": "contributor",
                    "lineNo": 475,
                    "params": [
                        {
                            "name": "text",
                            "type": "String"
                        },
                        {
                            "name": "node",
                            "type": "{errors Array}"
                        }
                    ],
                    "errors": [
                        "Did not recognize \"see\" tag."
                    ],
                    "throws": [],
                    "see": [],
                    "doc": "Notes a contributor.  More than one can be credited."
                },
                {
                    "name": "constructor",
                    "lineNo": 487,
                    "params": [
                        {
                            "name": "text",
                            "type": "String"
                        },
                        {
                            "name": "node",
                            "type": "{errors Array}"
                        }
                    ],
                    "errors": [],
                    "throws": [],
                    "see": [],
                    "doc": "Tags a node as a constructor function."
                },
                {
                    "name": "deprecated",
                    "lineNo": 499,
                    "params": [
                        {
                            "name": "text",
                            "type": "String"
                        },
                        {
                            "name": "node",
                            "type": "{errors Array}"
                        }
                    ],
                    "errors": [],
                    "throws": [],
                    "see": [],
                    "doc": "Tags a documentation node as deprecated."
                },
                {
                    "name": "module",
                    "lineNo": 511,
                    "params": [
                        {
                            "name": "text",
                            "type": "String"
                        },
                        {
                            "name": "node",
                            "type": "{errors Array}"
                        }
                    ],
                    "errors": [],
                    "throws": [],
                    "see": [],
                    "doc": ""
                },
                {
                    "name": "fileoverview",
                    "lineNo": 521,
                    "params": [
                        {
                            "name": "text",
                            "type": "String"
                        },
                        {
                            "name": "node",
                            "type": "{errors Array}"
                        }
                    ],
                    "errors": [
                        "Did not recognize \"see\" tag."
                    ],
                    "throws": [],
                    "see": [],
                    "doc": ""
                },
                {
                    "name": "type",
                    "lineNo": 528,
                    "params": [],
                    "errors": [],
                    "throws": [],
                    "see": [],
                    "doc": ""
                }
            ]
        }
    ]
}
